sapply(PDS_trips, mode)
colnames(PDS_trips)[3] <- "boat_id"
colnames(PDS_trips)[6] <- "boat_code"
colnames(PDS_trips)[7] <- "station_code"
PDS_trips$trip_id <- as.integer(PDS_trips$trip_id)
colnames(PDS_trips)[9] <- "gear_code"
colnames(PDS_trips)[10] <- "habitat_code"
PDS_trips$donor_tripid <- as.integer(PDS_trips$donor_tripid)
emptytabs[[2]]
sapply(PDS_trips, mode)
View(PDS_trips)
PDS_trips$gear_code <- gears$gear_code[match(PDS_trips$gear_code, gears$gear)]
emptytabs[[2]]
sapply(PDS_trips, mode)
RMySQL::dbWriteTable(test, "PDS_trips", PDS_trips, row.names=FALSE, append = TRUE)
PDS_trips2 <- RMySQL::dbReadTable(test, "PDS_trips")
sapply(PDS_trips2, mode)
emptytabs[[2]]
##pds points
emptytabs[[1]]
sapply(PDS_points, mode)
RMySQL::dbWriteTable(test, "PDS_points", PDS_points, row.names=FALSE, append = TRUE)
sapply(PDS_points2, mode)
PDS_points2 <- RMySQL::dbReadTable(test, "PDS_points")
sapply(PDS_points2, mode)
emptytabs[[1]]
View(PDS_points2)
RMySQL::dbDisconnect(test)
saveRDS(trips, file = "data/trips.rds")
saveRDS(landings, file = "data/landings.rds")
saveRDS(PDS_trips, file = "data/PDS_trips.rds")
saveRDS(PDS_points, file = "data/PDS_points.rds")
shp_df <- readRDS("data/shape.rds")
kobo_trips <- readRDS("data/trips.rds")
kobo_landings <- readRDS("data/landings.rds")
pds_trips <- readRDS("data/PDS_trips.rds")
pds_points <- readRDS("data/PDS_points.rds")
max_date_numeric_kobo <- max(kobo_trips$date_numeric)
max_date_numeric_pds <- max(pds_trips$date_numeric)
max_date_numeric_kobo
max_date_numeric_pds
View(PDS_trips)
View(PDS_points2)
runApp()
path_to_koboauth <- "~/Documents/Worldfish/peskAAS/KoBo-auth.txt"
# path_to_token <- "/home/shaun/Desktop/Worldfish/token.rds"
# path_to_backup_dir <- "East_Timor/Worldfish/peskAAS/backups/"  ## dropbox path
kobo_id <-  344563 # new landings data
############# DON'T CHANGE CODE BELOW ###############
print(Sys.Date())
message("Retrieving landings data from KoBo")
# x <- httr::GET("https://kc.humanitarianresponse.info/api/v1/data.csv", httr::authenticate("atilley", "4*tykPG*"))
# availdata <- readr::read_csv(httr::content(x, "raw"))
kobocreds <- scan(path_to_koboauth, what = "", sep = "\n")
kobocreds <- kobocreds[!grepl("^#", kobocreds)]
kobocreds <- kobocreds[grep(":", kobocreds)[1]]
stopifnot(length(kobocreds) == 1L)
kobocreds <- gsub(" ", "", kobocreds)
kobocreds <- strsplit(kobocreds, split = ":")[[1]][1:2]
stopifnot(length(kobocreds) == 2L)
URL <- paste0("https://kc.humanitarianresponse.info/api/v1/data/", kobo_id, ".xlsx")
z <- httr::GET(URL, httr::authenticate(kobocreds[1], kobocreds[2]))
httr::stop_for_status(z)
tmpz <- tempfile(fileext = ".xlsx")
filetag <- file(tmpz, open = "wb")
writeBin(httr::content(z, type = "raw"), filetag)
close(filetag)
message("Reading Kobo tables")
cty <- c("text", "text", "date", "text", "date", rep("text", 39))
trips <- readxl::read_excel(tmpz, sheet = 1, col_types = cty)
colnames(trips) <- gsub(".+/", "", colnames(trips))
colnames(trips) <- gsub("^_+", "", colnames(trips))
trips$index <- as.integer(trips$index)
spp <- readxl::read_excel(tmpz, sheet = 2, col_types = "text")
colnames(spp) <- gsub(".+/", "", colnames(spp))
colnames(spp) <- gsub("^_+", "", colnames(spp))
spp$parent_index <- as.integer(spp$parent_index)
spp <- spp[order(spp$parent_index), ] ## should be ordered anyway but just in case
spp$trip_id <- trips$id[spp$parent_index] # make sure no trips have been removed prior to this
tmp <- split(spp$trip_id, f = factor(spp$trip_id, levels = unique(spp$trip_id)))
addnos <- function(v) paste0(v, formatC(seq_along(v), width = 2, format = "d", flag = "0"))
tmp <- lapply(tmp, addnos)
spp$rec_id <- unlist(tmp, use.names = FALSE)
## remove non-boat-based trips
trips$has_boat[is.na(trips$has_boat)] <- "FALSE"
trips$has_boat[trips$has_boat != "TRUE"] <- "FALSE" ## may not need this next time
trips$has_boat <- as.logical(trips$has_boat)
trips <- trips[trips$has_boat,]
###trips <- trips[!trips$id %in% peskador$trip_id, ] ############# replace rows in peskaDAT.sqlite??
spp <- spp[spp$parent_index %in% trips$index, ]
dups <- duplicated(spp[, -match("index", colnames(spp))])
if(any(dups)){
message("Duplicates found for trip(s) ", unique(spp[["parent_index"]][dups]))
spp <- spp[!dups, ]
}
message("Filtering tables & tidying columns")
trips$rel_effort <- NA_integer_ ### remember to calculate = men + women + children
trips$trip_effort <- NA_real_ ### remember to calculate = rel_effort * trip_hours
trips$flag_code <- 0L
trips$mesh_size[is.na(trips$mesh_size)] <- trips$mesh_size_other[is.na(trips$mesh_size)]
trips <- trips[c("id", "date", "landing_site_name", "habitat_boat", "boat_type", "has_PDS", "IMEI", "boat_reg_no", "boat_owner_name",
"gear_type", "mesh_size",  "duration", "no_men_fishers", "no_women_fishers", "no_child_fishers",
"rel_effort", "trip_effort", "total_catch_value",  "happiness_rating", "no_boats", "how_many_gleaners_today",
"flag", "notes")]
trips <- trips[c("id", "date", "landing_site_name", "habitat_boat", "boat_type", "has_PDS", "IMEI", "boat_reg_no", "boat_owner_name",
"gear_type", "mesh_size",  "duration", "no_men_fishers", "no_women_fishers", "no_child_fishers",
"rel_effort", "trip_effort", "total_catch_value",  "happiness_rating", "no_boats", "how_many_gleaners_today",
"flag_code", "notes")]
trips <- readxl::read_excel(tmpz, sheet = 1, col_types = cty)
colnames(trips) <- gsub(".+/", "", colnames(trips))
colnames(trips) <- gsub("^_+", "", colnames(trips))
trips$index <- as.integer(trips$index)
spp <- readxl::read_excel(tmpz, sheet = 2, col_types = "text")
colnames(spp) <- gsub(".+/", "", colnames(spp))
colnames(spp) <- gsub("^_+", "", colnames(spp))
spp$parent_index <- as.integer(spp$parent_index)
spp <- spp[order(spp$parent_index), ] ## should be ordered anyway but just in case
spp$trip_id <- trips$id[spp$parent_index] # make sure no trips have been removed prior to this
tmp <- split(spp$trip_id, f = factor(spp$trip_id, levels = unique(spp$trip_id)))
addnos <- function(v) paste0(v, formatC(seq_along(v), width = 2, format = "d", flag = "0"))
tmp <- lapply(tmp, addnos)
spp$rec_id <- unlist(tmp, use.names = FALSE)
## remove non-boat-based trips
trips$has_boat[is.na(trips$has_boat)] <- "FALSE"
trips$has_boat[trips$has_boat != "TRUE"] <- "FALSE" ## may not need this next time
trips$has_boat <- as.logical(trips$has_boat)
trips <- trips[trips$has_boat,]
###trips <- trips[!trips$id %in% peskador$trip_id, ] ############# replace rows in peskaDAT.sqlite??
spp <- spp[spp$parent_index %in% trips$index, ]
dups <- duplicated(spp[, -match("index", colnames(spp))])
if(any(dups)){
message("Duplicates found for trip(s) ", unique(spp[["parent_index"]][dups]))
spp <- spp[!dups, ]
}
message("Filtering tables & tidying columns")
trips$rel_effort <- NA_integer_ ### remember to calculate = men + women + children
trips$trip_effort <- NA_real_ ### remember to calculate = rel_effort * trip_hours
trips$flag_code <- 0L
trips_boat_id <- NA_integer_
trips$mesh_size[is.na(trips$mesh_size)] <- trips$mesh_size_other[is.na(trips$mesh_size)]
View(trips2)
trips <- trips[c("id", "date", "landing_site_name", "habitat_boat", "boat_type", "has_PDS", "IMEI", "boat_id", "boat_reg_no", "boat_owner_name",
"gear_type", "mesh_size",  "duration", "no_men_fishers", "no_women_fishers", "no_child_fishers",
"rel_effort", "trip_effort", "total_catch_value",  "happiness_rating", "no_boats", "how_many_gleaners_today",
"flag_code", "notes")]
trips$boat_id <- NA_integer_
trips <- trips[c("id", "date", "landing_site_name", "habitat_boat", "boat_type", "has_PDS", "IMEI", "boat_id", "boat_reg_no", "boat_owner_name",
"gear_type", "mesh_size",  "duration", "no_men_fishers", "no_women_fishers", "no_child_fishers",
"rel_effort", "trip_effort", "total_catch_value",  "happiness_rating", "no_boats", "how_many_gleaners_today",
"flag_code", "notes")]
colnames(trips) <- c("trip_id", "date", "station_code", "habitat_code", "boat_code",  "has_PDS", "IMEI",  "boat_id", "owner", "gear_code",
"mesh", "trip_hours", "men", "women", "children", "rel_effort", "trip_effort", "catch_value", "rank_code",
"all_boats", "all_gleaners", "flag_code", "note")
trips$station_code[!trips$station_code %in% paste(1:30)] <- NA
trips$station_code <- as.integer(trips$station_code)
if(mode(trips$station_code) == "character") warning("Site variable failed conversion to integer")
trips$habitat_code[!trips$habitat_code %in% paste(1:7)] <- NA
trips$habitat_code <- as.integer(trips$habitat_code)
if(mode(trips$habitat_code) == "character") warning("Habitat variable failed conversion to integer")
head(trips$gear_code)
tail(trips$gear_code)
unique(trips$gear_code)
message("Reading Kobo tables")
cty <- c("text", "text", "date", "text", "date", rep("text", 39))
trips <- readxl::read_excel(tmpz, sheet = 1, col_types = cty)
colnames(trips) <- gsub(".+/", "", colnames(trips))
colnames(trips) <- gsub("^_+", "", colnames(trips))
trips$index <- as.integer(trips$index)
spp <- readxl::read_excel(tmpz, sheet = 2, col_types = "text")
colnames(spp) <- gsub(".+/", "", colnames(spp))
colnames(spp) <- gsub("^_+", "", colnames(spp))
spp$parent_index <- as.integer(spp$parent_index)
spp <- spp[order(spp$parent_index), ] ## should be ordered anyway but just in case
spp$trip_id <- trips$id[spp$parent_index] # make sure no trips have been removed prior to this
tmp <- split(spp$trip_id, f = factor(spp$trip_id, levels = unique(spp$trip_id)))
addnos <- function(v) paste0(v, formatC(seq_along(v), width = 2, format = "d", flag = "0"))
tmp <- lapply(tmp, addnos)
spp$rec_id <- unlist(tmp, use.names = FALSE)
## remove non-boat-based trips
trips$has_boat[is.na(trips$has_boat)] <- "FALSE"
trips$has_boat[trips$has_boat != "TRUE"] <- "FALSE" ## may not need this next time
trips$has_boat <- as.logical(trips$has_boat)
trips <- trips[trips$has_boat,]
###trips <- trips[!trips$id %in% peskador$trip_id, ] ############# replace rows in peskaDAT.sqlite??
spp <- spp[spp$parent_index %in% trips$index, ]
dups <- duplicated(spp[, -match("index", colnames(spp))])
if(any(dups)){
message("Duplicates found for trip(s) ", unique(spp[["parent_index"]][dups]))
spp <- spp[!dups, ]
}
message("Filtering tables & tidying columns")
trips$rel_effort <- NA_integer_ ### remember to calculate = men + women + children
trips$trip_effort <- NA_real_ ### remember to calculate = rel_effort * trip_hours
trips$flag_code <- 0L
trips$boat_id <- NA_integer_
trips$mesh_size[is.na(trips$mesh_size)] <- trips$mesh_size_other[is.na(trips$mesh_size)]
colnames(trips)
trips <- trips[c("id", "date", "landing_site_name", "habitat_boat", "boat_type", "has_PDS", "IMEI", "boat_id", "boat_reg_no", "boat_owner_name",
"gear_type", "mesh_size",  "duration", "no_men_fishers", "no_women_fishers", "no_child_fishers",
"rel_effort", "trip_effort", "total_catch_value",  "happiness_rating", "no_boats", "how_many_gleaners_today",
"flag_code", "notes")]
colnames(trips) <- c("trip_id", "date", "station_code", "habitat_code", "boat_code",  "has_PDS", "IMEI",  "boat_id", "boat_reg_no", "owner", "gear_code",
"mesh", "trip_hours", "men", "women", "children", "rel_effort", "trip_effort", "catch_value", "rank_code",
"all_boats", "all_gleaners", "flag_code", "note")
trips$station_code[!trips$station_code %in% paste(1:30)] <- NA
trips$station_code <- as.integer(trips$station_code)
if(mode(trips$station_code) == "character") warning("Site variable failed conversion to integer")
trips$habitat_code[!trips$habitat_code %in% paste(1:7)] <- NA
trips$habitat_code <- as.integer(trips$habitat_code)
if(mode(trips$habitat_code) == "character") warning("Habitat variable failed conversion to integer")
head(trips$gear_code)
## convert other cols to integers/numeric
trips$gear_code[!trips$gear_code %in% c("GN", "HL", "LL", "SG", "CN", "MC", "BS", "SN", "TP")] <- NA_character_
head(atch(trips$gear_code, c("GN", "HL", "LL", "SG", "CN", "MC", "BS", "SN", "TP")))
head(match(trips$gear_code, c("GN", "HL", "LL", "SG", "CN", "MC", "BS", "SN", "TP")))
trips$gear_code <- match(trips$gear_code, c("GN", "HL", "LL", "SG", "CN", "MC", "BS", "SN", "TP"))
#trips$mesh[!trips$mesh %in% c("1", "1.25", "1.5", "2", "2.5", "3")] <- NA_character_
suppressWarnings(trips$mesh <- as.numeric(trips$mesh)) #warning ok
trips$men <- as.integer(trips$men)
trips$women <- as.integer(trips$women)
trips$children <- as.integer(trips$children)
trips$rank_code[!trips$rank_code %in% paste(1:5)] <- NA_character_
trips$rank_code <- as.integer(trips$rank_code)
head(trips$rank_code)
View(trips)
trips$boat_code[!trips$boat_code %in% paste(1:2)] <- NA_character_ ## note no shoreys included here
trips$boat_code <- as.integer(trips$boat_code)
trips$rel_effort <- trips$men + trips$women + trips$children
trips$flag_code[trips$rel_effort < 1] <- 10L
trips$trip_hours <- as.numeric(trips$trip_hours)
trips$trip_hours[is.na(trips$trip_hours)] <- 0
trips$flag_code[trips$trip_hours < 1] <- 9L
trips$flag_code[trips$trip_hours > 72] <- 9L
trips$trip_hours <- round(trips$trip_hours, 1)
trips$trip_effort <- trips$rel_effort * trips$trip_hours
trips$IMEI[is.na(trips$IMEI)] <- "0"
ncimei <- nchar(trips$IMEI)
trips$IMEI[ncimei > 7] <- sub(".+(.{7})$", "\\1", trips$IMEI[ncimei > 7])
ncimei <- nchar(trips$IMEI)
nzta <- 8 - ncimei # would be 7 - ncemi but add 1 for R indexing style
zta <- c("", "0", "00", "000", "0000", "00000", "000000", "0000000")[nzta]
trips$IMEI <- paste0(zta, trips$IMEI)
trips$date_numeric <- as.numeric(as.Date(trips$date))
trips <- trips[order(trips$date_numeric, trips$trip_id), ]
trips$has_PDS <- as.integer(as.logical(trips$has_PDS))
trips$date <- as.character(trips$date)
trips$catch_value <- as.integer(trips$catch_value)
trips$all_boats <- as.integer(trips$all_boats)
trips$all_gleaners <- as.integer(trips$all_gleaners)
View(spp)
suppressWarnings(spp$species <- as.integer(spp$species)) # warning ok
spp$species[is.na(spp$species)] <- 999 # unidentified species code
fcc <- grep("no_individuals_5_10", colnames(spp))
lcc <- grep("no_individuals_55_60", colnames(spp))
tmp <- spp[, seq(fcc, lcc)]
midpoints <- c(7.5, 12.5, 17.5, 22.5, 27.5, 32.5, 37.5, 42.5, 47.5, 52.5, 57.5)
spp$length <- midpoints[apply(tmp, 1, function(r) match(FALSE, is.na(r)))]
spp$nfish <- as.integer(apply(tmp, 1, function(r) r[match(FALSE, is.na(r))]))
bigfish <- is.na(spp$length)
spp$length[bigfish] <- as.numeric(spp$fish_length_over60[bigfish]) # will be NA for zero catch
spp$nfish[bigfish] <- as.integer(spp$no_individuals_over60[bigfish]) # will be NA for zero catch
#spp$nfish[bigfish] <- 1L
spp$nfish[is.na(spp$length) | spp$species == 0] <- 0L
spp$flag_code <- 0L
spp$flag_code[is.na(spp$nfish)] <- 7L # shouldn't be any NA in nfish
spp$weight_g <- NA_real_
spp <- spp[c("rec_id", "trip_id", "species", "length", "nfish", "weight_g", "food_or_sale", "flag", "notes")]
spp <- spp[c("rec_id", "trip_id", "species", "length", "nfish", "weight_g", "food_or_sale", "flag_code", "notes")]
colnames(spp) <- c("rec_id", "trip_id", "species_code",  "length", "nfish", "weight_g", "food_sale", "flag_code", "note")
spp$species_code <- as.integer(spp$species_code)
spp <- spp[-1] ## no longer use rec_ids from 20190905
View(spp)
## connect to db
#peskaDAT <- DBI::dbConnect(RSQLite::SQLite(), path_to_db)
########## TODO change to cnf file
peskaDAT = RMySQL::dbConnect(RMySQL::MySQL(), user='wildrlab_shaun', password='Si9G7uK2nxu2mVR',
dbname='wildrlab_peskaDB', host='johnny.heliohost.org', port=3306)
RMySQL::dbDisconnect(peskaDAT)
## connect to db
#peskaDAT <- DBI::dbConnect(RSQLite::SQLite(), path_to_db)
########## TODO change to cnf file
peskaDAT = RMySQL::dbConnect(RMySQL::MySQL(), user='wildrlab_shaun', password='Si9G7uK2nxu2mVR',
dbname='wildrlab_peskaDB', host='johnny.heliohost.org', port=3306)
## connect to db
#peskaDAT <- DBI::dbConnect(RSQLite::SQLite(), path_to_db)
########## TODO change to cnf file
peskaDAT = RMySQL::dbConnect(RMySQL::MySQL(), user='wildrlab_shaun', password='Si9G7uK2nxu2mVR',
dbname='wildrlab_peskaDB', host='johnny.heliohost.org', port=3306)
RMySQL::dbDisconnect(test)
test = RMySQL::dbConnect(RMySQL::MySQL(), user='wildrlab_shaun', password='Si9G7uK2nxu2mVR',
dbname='wildrlab_peskaDB', host='johnny.heliohost.org', port=3306)
RMySQL::dbDisconnect(test)
peskaDAT = RMySQL::dbConnect(RMySQL::MySQL(), user='wildrlab_shaun', password='Si9G7uK2nxu2mVR',
dbname='wildrlab_peskaDB', host='johnny.heliohost.org', port=3306)
## Get old trips table and check for duplicates
trips1 <- RMySQL::dbReadTable(peskaDAT, "trips")
discard_trips <- trips$trip_id %in% trips1$trip_id
discard_spps <- spp$trip_id %in% trips$trip_id[discard_trips]
trips <- trips[!discard_trips, ]
spp <- spp[!discard_spps, ]
## Apply flag codes
sp_pars <- RMySQL::dbReadTable(peskaDAT, "species")
sp_rows <- match(spp$species_code, sp_pars$species_code)
sp_rows
sp_rows[is.na(sp_rows)] <- match(999L, sp_pars$species_code)
## Flag suspect entries
tooshort <- spp$length > 0 & spp$length < sp_pars$minlength[sp_rows]
tooshort[is.na(tooshort)] <- FALSE
spp$flag_code[tooshort] <- 1L
toolong <- spp$length > sp_pars$maxlength[sp_rows]
toolong[is.na(toolong)] <- FALSE
spp$flag_code[toolong] <- 2L
get_weight <- function(a, b, l) a * l^b
unitwgt <- mapply(get_weight, sp_pars$a[sp_rows], sp_pars$b[sp_rows],  spp$length)
tooheavy <- unitwgt > sp_pars$maxweight[sp_rows] * 1.5
tooheavy[is.na(tooheavy)] <- FALSE
spp$flag_code[tooheavy & !toolong] <- 3L
unitwgt[spp$species_code == 45L] <- 50 # crab
unitwgt[spp$species_code == 24L] <- 1000 # octopus
unitwgt[spp$species_code == 50L] <- 6 # octopus
spp$weight_g <- round(spp$nfish * unitwgt) # note: throws error if no spps
spp$weight_g[spp$species_code == 0L] <- 0
invalidcombo <- trips$habitat_code %in% c(2, 5) & trips$gear_code == 7
sum(invalidcombo)
trips$flag_code[invalidcombo] <- 8L
message("Appending new records")
sapply(trips, mode)
sapply(trips2, mode)
trips$trip_id <- as.integer(trips$trip_id)
View(trips)
RMySQL::dbWriteTable(peskaDAT, "trips", trips, append = TRUE, row.names=FALSE)
message("Successfully appended ", nrow(trips),  " new trip records")
sapply(trips1, mode)
trips1 <- rbind(trips1, trips) ## still need to link PDS records below
sapply(spp, mode)
spp$trip_id <- as.integer(spp$trip_id)
RMySQL::dbWriteTable(peskaDAT, "landings", spp, append = TRUE, row.names=FALSE)
message("Successfully appended ", nrow(spp),  " new landings records")
## import existing PDS data
boats <- RMySQL::dbReadTable(peskaDAT, "boats")
stations <- RMySQL::dbReadTable(peskaDAT, "stations")
linked_records <- DBI::dbGetQuery(peskaDAT, "SELECT * FROM PDS_trips WHERE NOT trip_id='NA'")
last_PDS_record <- DBI::dbGetQuery(peskaDAT, 'SELECT * FROM PDS_trips ORDER BY date_numeric DESC LIMIT 1')
last_PDS_upload_date <- last_PDS_record$date_numeric
RMySQL::dbDisconnect(peskaDAT)
View(boats)
boats <- boats[!is.na(boats$IMEI) & !is.na(boats$boat_id) & !is.na(boats$boat_code), ]
(as.integer(Sys.Date()) == last_PDS_record$date_numeric)
startdate <- as.character(as.Date(last_PDS_upload_date, origin = "1970-01-01")) # note there may be some duplicates
startdate
## filter by uniques at append stage
enddate <- as.character(Sys.Date()) ## pds api will only provide records up to yesterday
enddate
URL <- paste0("https://api.pelagicdata.com/api/VLxEDznakTkiJtu34Lq2/v1/points/", startdate, "/", enddate)
tmp <- httr::GET(URL, httr::authenticate("shaunpwilkinson@gmail.com", "R1fDe1QDB6"))
geos <- readr::read_csv(httr::content(tmp, "raw"), col_types = "Tdddddddcc")
View(geos)
geos <- geos[!is.na(geos$Trip), ]
if(nrow(geos) == 0) return(NULL)
geos <- geos[, 1:5]
geos$Time <- as.Date(geos$Time)
geos$Lat <- round(geos$Lat, 3)
geos$Lng <- round(geos$Lng, 3)
geos <- geos[!duplicated(geos[c("Trip", "Lat", "Lng")]), ]
if(nrow(geos) == 0) return(NULL)
geos$Lat <- geos$Lat * 1000
geos$Lng <- geos$Lng * 1000
geos$Lat <- 2 * round(geos$Lat/2)
geos$Lng <- 2 * round(geos$Lng/2)
geos$Lat <- geos$Lat/1000
geos$Lng <- geos$Lng/1000
geos <- geos[!duplicated(geos[c("Trip", "Lat", "Lng")]), ]
if(nrow(geos) == 0) return(NULL)
geos$latlng <- paste0(geos$Lat, ",", geos$Lng)
colnames(geos) <- c("date", "boat_id", "PDS_trip", "lat", "lng", "latlng")
geos$date <- as.character(geos$date)
PDS_trips <- geos[c("PDS_trip", "date", "boat_id")]
PDS_trips <- PDS_trips[!duplicated(PDS_trips$PDS_trip),] #30572
PDS_points <- geos[c("PDS_trip", "latlng")]
PDS_trips$date_numeric <- as.numeric(as.Date(PDS_trips$date))
indices <- match(PDS_trips$boat_id, boats$boat_id)
PDS_trips$IMEI <- boats$IMEI[indices]
PDS_trips$boat_code <- boats$boat_code[indices]#  1 = canoe, 2 = motor
PDS_trips$station_code <- stations$station_code[match(boats$municipality_name[indices], stations$municipality_name)]
View(PDS_trips)
discards <- is.na(PDS_trips$IMEI) | is.na(PDS_trips$boat_code) | is.na(PDS_trips$station_code)
discard_trips <- PDS_trips$PDS_trip[discards]
PDS_trips <- PDS_trips[!discards, ]
if(nrow(PDS_trips) == 0) return(NULL)
discard_points <- PDS_points$PDS_trip %in% discard_trips
PDS_points <- PDS_points[!discard_points, ] #1005597
## Link records where poss
PDSTIMEI7 <- sub(".+(.{7})$", "\\1", PDS_trips$IMEI)
PDSTIMEI7 <- paste0(PDSTIMEI7, "-",PDS_trips$date)
PDS_trips$trip_id <- trips1$trip_id[match(PDSTIMEI7, paste0(trips1$IMEI, "-", trips1$date))]
## unlink KOBO trips that point to multiple PDS trips
PDS_trips$trip_id[PDS_trips$trip_id %in% PDS_trips$trip_id[duplicated(PDS_trips$trip_id)]] <- NA
## assign 10 evenly spaced points to each pds trip
tmp <- strsplit(PDS_points$latlng, split = ",")
PDS_points_full <- PDS_points
PDS_points_full$lat <- as.numeric(sapply(tmp, "[", 1))
PDS_points_full$lng <- as.numeric(sapply(tmp, "[", 2))
f <- factor(PDS_points_full$PDS_trip, levels = unique(PDS_points_full$PDS_trip))
lats <- split(PDS_points_full$lat, f = f)
lngs <- split(PDS_points_full$lng, f = f)
myfun <- function(v) v[round(seq(1, length(v), length.out = 10))]
newlats <- lapply(lats, myfun)
newlats <- do.call("rbind", newlats)
colnames(newlats) <- paste0("lat", 1:10)
newlngs <- lapply(lngs, myfun)
newlngs <- do.call("rbind", newlngs)
colnames(newlngs) <- paste0("lng", 1:10)
newcoords <- cbind(newlats, newlngs)
## which ones need predicting
nas <- is.na(PDS_trips$trip_id)
PDS_trips$gear_code <- PDS_trips$habitat_code <- PDS_trips$donor_tripid <- PDS_trips$donor_distance <- NA
(any(!nas))
linked_tripids <- PDS_trips$trip_id[!nas] #kobo ids
indices <- match(linked_tripids, trips1$trip_id) #row in kobo trip table
PDS_trips$gear_code[!nas] <- trips1$gear_code[indices]
PDS_trips$habitat_code[!nas] <- trips1$habitat_code[indices] #stations and btypes already done earlier
PDS_trips$donor_tripid[!nas] <- PDS_trips$trip_id[!nas]
PDS_trips$donor_distance[!nas] <- 0
View(PDS_trips)
oldcoords <- linked_records[, seq(match("lat1", colnames(linked_records)), ncol(linked_records))]
nnobj <- RANN::nn2(oldcoords, newcoords[nas,], k = 1)
## insert unknown gears and habitats into pds trip table
donors <- linked_records$trip_id[nnobj$nn.idx] # kobo trip ids
PDS_trips$gear_code[nas] <- linked_records$gear_code[nnobj$nn.idx] # note name-match indexing on kobo trip id
PDS_trips$habitat_code[nas] <- linked_records$habitat_code[nnobj$nn.idx]
PDS_trips$station_code[nas] <- linked_records$station_code[nnobj$nn.idx]
## not necessary to predict boat type
PDS_trips$donor_tripid[nas] <- donors
PDS_trips$donor_distance[nas] <- nnobj$nn.dists[, 1]
PDS_trips <- cbind(PDS_trips, newcoords)
View(PDS_trips)
discards <- PDS_trips$donor_distance > 0.2
if(all(discards)) return(NULL)
discard_trips <- PDS_trips$PDS_trip[discards]
PDS_trips <- PDS_trips[!discards, ]
discard_points <- PDS_points$PDS_trip %in% discard_trips
PDS_points <- PDS_points[!discard_points, ]
peskaDAT = RMySQL::dbConnect(RMySQL::MySQL(), user='wildrlab_shaun', password='Si9G7uK2nxu2mVR',
dbname='wildrlab_peskaDB', host='johnny.heliohost.org', port=3306)
sapply(PDS_trips, mode)
sapply(PDS_trips2, mode)
RMySQL::dbWriteTable(peskaDAT, "PDS_trips", PDS_trips, append = TRUE, row.names=FALSE)
View(PDS_points)
message("Successfully appended ", nrow(PDS_trips),  " new PDS trip records")
RMySQL::dbWriteTable(peskaDAT, "PDS_points", PDS_points, append = TRUE, row.names=FALSE)
message("Successfully appended ", nrow(PDS_points),  " new PDS point records")
RMySQL::dbDisconnect(peskaDAT)
path_to_peskaDBauth <- "/home/shaun/Desktop/Worldfish/peskAAS/peskaDB-auth.txt"
path_to_PDSauth <- "/home/shaun/Desktop/Worldfish/peskAAS/PDS-auth.txt"
path_to_koboauth <- "~/Documents/Worldfish/peskAAS/authfiles/KoBo-auth.txt"
path_to_peskDBauth <- "~/Documents/Worldfish/peskAAS/authfiles/peskaDB-auth.txt"
path_to_PDSauth <- "~/Documents/Worldfish/peskAAS/authfiles/PDS-auth.txt"
peskacreds <- scan(path_to_peskaDBauth, what = "", sep = "\n")
peskacreds <- scan(path_to_peskaDBauth, what = "", sep = "\n")
path_to_koboauth <- "~/Dropbox/East_Timor/Worldfish/peskAAS/authfiles/KoBo-auth.txt"
path_to_peskDBauth <- "~/Dropbox/East_Timor/Worldfish/peskAAS/authfiles/peskaDB-auth.txt"
path_to_PDSauth <- "~/Dropbox/East_Timor/Worldfish/peskAAS/authfiles/PDS-auth.txt"
peskacreds <- scan(path_to_peskaDBauth, what = "", sep = "\n")
path_to_peskDBauth
peskacreds <- scan(path_to_peskaDBauth, what = "", sep = "\n")
file.exists(path_to_peskaDBauth)
path_to_peskaDBauth
path_to_koboauth <- "~/Dropbox/East_Timor/Worldfish/peskAAS/authfiles/KoBo-auth.txt"
path_to_peskDBauth <- "~/Dropbox/East_Timor/Worldfish/peskAAS/authfiles/peskaDB-auth.txt"
path_to_PDSauth <- "~/Dropbox/East_Timor/Worldfish/peskAAS/authfiles/PDS-auth.txt"
path_to_peskDBauth
path_to_koboauth <- "/home/shaun/Desktop/Worldfish/peskAAS/KoBo-auth.txt"
path_to_peskaDBauth <- "/home/shaun/Desktop/Worldfish/peskAAS/peskaDB-auth.txt"
path_to_PDSauth <- "/home/shaun/Desktop/Worldfish/peskAAS/PDS-auth.txt"
kobocreds <- scan(path_to_koboauth, what = "", sep = "\n")
kobocreds <- kobocreds[!grepl("^#", kobocreds)]
kobocreds <- kobocreds[grep(":", kobocreds)[1]]
stopifnot(length(kobocreds) == 1L)
kobocreds <- gsub(" ", "", kobocreds)
kobocreds <- strsplit(kobocreds, split = ":")[[1]][1:2]
stopifnot(length(kobocreds) == 2L)
kobocreds
peskacreds <- scan(path_to_peskaDBauth, what = "", sep = "\n")
peskacreds <- peskacreds[!grepl("^#", peskacreds)]
peskacreds <- peskacreds[grep(":", peskacreds)[1]]
stopifnot(length(peskacreds) == 1L)
peskacreds <- gsub(" ", "", peskacreds)
peskacreds <- strsplit(peskacreds, split = ":")[[1]][1:2]
stopifnot(length(peskacreds) == 2L)
peskacreds
PDScreds <- scan(path_to_PDSauth, what = "", sep = "\n")
PDScreds <- PDScreds[!grepl("^#", PDScreds)]
PDScreds <- PDScreds[grep(":", PDScreds)[1]]
stopifnot(length(PDScreds) == 1L)
PDScreds <- gsub(" ", "", PDScreds)
PDScreds <- strsplit(PDScreds, split = ":")[[1]][1:2]
stopifnot(length(PDScreds) == 2L)
PDScreds
PDScreds["user"]
PDScreds
names(kobocreds) <- c("user", "pass")
names(peskacreds) <- c("user", "pass")
names(PDScreds) <- c("user", "pass")
peskaDAT = RMySQL::dbConnect(RMySQL::MySQL(), user=peskacreds["user"], password=peskacreds["pass"],
dbname='wildrlab_peskaDB', host='johnny.heliohost.org', port=3306)
RMySQL::dbDisconnect(peskaDAT)
dbcreds <- c("wildrlab_guest", "aGD9h8zt74pEMzk")
names(dbcreds) = c("user", "pass")
dbcreds
saveRDS(dbcreds, file = "data/dbcreds.rds")
runApp()
q()
